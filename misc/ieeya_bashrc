#!/bin/bash
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# Source global definitions
if [ -f /etc/bashrc ]; then
        . /etc/bashrc
fi

HISTFILESIZE=5000

# Initialize Java
#export JAVA_HOME="/opt/java/jdk1.8.0_11/"

# some aliases
alias ssh='ssh -X'
alias lxplus='ssh afiqaize@lxplus.cern.ch'
alias lxplus5='ssh afiqaize@lxplus5.cern.ch'
alias bastion='ssh afiqaize@bastion.desy.de'
alias dwgcms12='ssh afiqaize@desy-cms012.desy.de'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias ll='ls -ltrh'
alias la='ls -a'
alias l1='ls -1'
alias psa="date; ps -fu $USER"
alias nemacs='emacs -nw'
alias startPO='cd /home/afiqaize/Downloads/Files/pokemon-online/bin/; ./Pokemon-Online > /dev/null 2>&1 & cd -'

cdup () { pushd .; for ((i=1; i<=$1; i++)); do cd ..; done; pwd; }

nafcms () {
    if [ -z "$1" ]; then
        ssh afiqaize@naf-desy-cms.desy.de
    else
        nNAF=${1}
        ssh afiqaize@naf-cms${nNAF}.desy.de
    fi
}

rootenv () {
    local whatToGrab=$1
    if [ -z ${whatToGrab} ]; then
        echo 'Which ROOT to grab if nothing is specified?'
        return
    fi

    if [ ${whatToGrab} = '5' ] || [ ${whatToGrab} = '5.34' ]; then
        source /home/afiqaize/root53434/bin/thisroot.sh
    elif [ ${whatToGrab} = '6' ] || [ ${whatToGrab} = '6.06' ]; then
        source /home/afiqaize/root60608/bin/thisroot.sh
    fi
}

# sudo related things
# if user is not root, pass all commands via sudo #
if [ $UID -ne 0 ]; then
    alias reboot='sudo reboot'
    alias aptUpdate='sudo apt-get update && sudo apt-get upgrade'
    alias aptInstall='sudo apt-get install'
    alias aptUpgrade='sudo apt-get dist-upgrade'
else
    alias aptUpdate='apt-get update && apt-get upgrade'
    alias aptInstall='apt-get install'
    alias aptUpgrade='apt-get dist-upgrade'
fi

### Below this line to be taken out if running on linux Mint ###

# SSH Color
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

use_color=true

# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.  Use internal bash
# globbing instead of external grep binary.
safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
match_lhs=""
[[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs}    ]] \
        && type -P dircolors >/dev/null \
        && match_lhs=$(dircolors --print-database)
[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true

if ${use_color} ; then
        # Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
        if type -P dircolors >/dev/null ; then
                if [[ -f ~/.dir_colors ]] ; then
                        eval $(dircolors -b ~/.dir_colors)
                elif [[ -f /etc/DIR_COLORS ]] ; then
                        eval $(dircolors -b /etc/DIR_COLORS)
                fi
        fi

        if [[ ${EUID} == 0 ]] ; then
                PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\h\[\033[01;34m\] \W \$\[\033[00m\] '
        else
                PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] '
        fi

        alias ls='ls --color=auto'
        alias grep='grep --colour=auto'
else
        if [[ ${EUID} == 0 ]] ; then
                # show root@ when we don't have colors
                PS1='\u@\h \W \$ '
        else
                PS1='\u@\h \w \$ '
        fi
fi

# Try to keep environment pollution down, EPA loves us.
unset use_color safe_term match_lhs

# Commented out, don't overwrite xterm -T "title" -n "icontitle" by default.
# If this is an xterm set the title to user@host:dir
#case "$TERM" in
#xterm*|rxvt*)
#    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'
#    ;;
#*)
#    ;;
#esac

# enable bash completion in interactive shells
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

# if the command-not-found package is installed, use it
if [ -x /usr/lib/command-not-found ]; then
    function command_not_found_handle {
	        # check because c-n-f could've been removed in the meantime
                if [ -x /usr/lib/command-not-found ]; then
		       /usr/bin/python /usr/lib/command-not-found -- $1
                   return $?
		   else
		       return 127
		       fi
		}
fi
