
;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(load-theme 'monokai t)

;; text highlighting-copying stuff
(when (fboundp 'electric-indent-mode) (electric-indent-mode -1)) ;; don't be auto-indenting augh
(transient-mark-mode 1) ; highlight text selection
(delete-selection-mode 1) ; delete selected text when typing
(show-paren-mode 1) ; turn on paren match highlighting
(setq mouse-drag-copy-region t) ; turn on highlight-autocopy to kill menu
(setq x-select-enable-clipboard t) ; things in kill menu is pastable outside emacs too
;(setq show-paren-style 'expression) ; highlight entire bracket expression

;; tabbing and spaces
(setq-default indent-tabs-mode nil) ; stop mixed tab and space
(setq c-default-style "user")

;; title bar and gnome tab to contain current file name
;; https://emacs.stackexchange.com/questions/16834/how-to-change-the-title-from-emacshost-to-file-name
(setq filename-as-title
      '(:eval
        (format "%s %s"
                (buffer-name)
                (cond
                 (buffer-file-truename
                  (concat "(" buffer-file-truename ")"))
                 (dired-directory
                  (concat "{" dired-directory "}"))
                 (t
                  "[no file]")))))
(setq-default frame-title-format filename-as-title)
(setq-default icon-title-format filename-as-title)

;; default font and size
(defun fontify-frame (frame)
  ;; get the frame properties
  ;; to see it printed out in action, open emacs in lisp mode (plain 'emacs (-nw)' with no file)
  ;; and do like (a-function some-arg) and C-j to evaluate the function
  (set 'frame-att (frame-monitor-attributes nil))
  ;; only for GUI, terminal font size decided by terminal itself...
  ;; eDP-1-1 stellaris main screen on nvidia
  ;; eDP-1 stellaris main on intel (no idea why name changes between gpu)
  ;; HDMI-0 viewsonic vx2458
  ;; other monitors can be listed with ./Downloads/misc_code/monitor-switch --list 
  (cond ((eq (car (car frame-att)) 'name)
        (cond ((string= (cdr (car frame-att)) "eDP-1-1")
               (set-frame-parameter frame 'font "Monospace 17"))
              ((string= (cdr (car frame-att)) "eDP-1")
               (set-frame-parameter frame 'font "Monospace 17"))
              ((string= (cdr (car frame-att)) "HDMI-0")
               (set-frame-parameter frame 'font "Monospace 13"))
              (t (set-frame-parameter frame 'font "Monospace 12"))))))

;; fontify current frame
(fontify-frame nil)

;; fontify any future frames
(push 'fontify-frame after-make-frame-functions)

;; timed check of which screen and adjust frame accordingly
(run-with-timer 3 1 'fontify-frame nil)

;; printer GUI (needs gtklp installed)
(setq lpr-command "gtklp")
(setq ps-lpr-command "gtklp")

;; automatic 2 vertical columns when opening 2 files
(setq
   split-width-threshold 0
   split-height-threshold nil)
;;(defun toggle-window-split ()
;;  (interactive)
;;  (if (= (count-windows) 2)
;;      (let* ((this-win-buffer (window-buffer))
;;                  (next-win-buffer (window-buffer (next-window)))
;;                       (this-win-edges (window-edges (selected-window)))
;;                            (next-win-edges (window-edges (next-window)))
;;                                 (this-win-2nd (not (and (<= (car this-win-edges)
;;                                                              (car next-win-edges))
;;                                                              (<= (cadr this-win-edges)
;;                                                                   (cadr next-win-edges)))))
;;                                      (splitter
;;                                             (if (= (car this-win-edges)
;;                                                         (car (window-edges (next-window))))
;;                                                   'split-window-horizontally
;;                                               'split-window-vertically)))
;;        (delete-other-windows)
;;        (let ((first-win (selected-window)))
;;            (funcall splitter)
;;              (if this-win-2nd (other-window 1))
;;                (set-window-buffer (selected-window) this-win-buffer)
;;                  (set-window-buffer (next-window) next-win-buffer)
;;                    (select-window first-win)
;;                      (if this-win-2nd (other-window 1))))))

;;(define-key ctl-x-4-map "t" 'toggle-window-split)

;;(add-hook 'emacs-startup-hook 'toggle-window-split)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(inhibit-startup-screen t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; same gnu style acts differently between machines/versions. why??
(c-add-style "afiqaize"
             '("gnu"
               (c-basic-offset . 2)     ; Guessed value
               (c-offsets-alist
                (access-label . 0)      ; Guessed value
                (class-close . 0)       ; Guessed value
                (defun-block-intro . +) ; Guessed value
                (defun-close . 0)       ; Guessed value
                (defun-open . 0)        ; Guessed value
                (else-clause . 0)       ; Guessed value
                (func-decl-cont . 0)    ; Guessed value
                (inclass . +)           ; Guessed value
                (innamespace . +)       ; Guessed value
                (namespace-close . 0)   ; Guessed value
                (namespace-open . 0)    ; Guessed value
                (statement . 0)         ; Guessed value
                (statement-cont . +)    ; Guessed value
                (substatement . +)      ; Guessed value
                (topmost-intro . 0)    ; Guessed value
                (topmost-intro-cont . 0) ; Guessed value
                (annotation-top-cont . 0)
                (annotation-var-cont . +)
                (arglist-close . c-lineup-close-paren)
                (arglist-cont c-lineup-gcc-asm-reg 0)
                (arglist-cont-nonempty . c-lineup-arglist)
                (arglist-intro . c-lineup-arglist-intro-after-paren)
                (block-close . 0)
                (block-open . 0)
                (brace-entry-open . 0)
                (brace-list-close . 0)
                (brace-list-entry . c-lineup-under-anchor)
                (brace-list-intro . c-lineup-arglist-intro-after-paren)
                (brace-list-open . +)
                (c . c-lineup-C-comments)
                (case-label . 0)
                (catch-clause . 0)
                (class-open . 0)
                (comment-intro . c-lineup-comment)
                (composition-close . 0)
                (composition-open . 0)
                (cpp-define-intro c-lineup-cpp-define +)
                (cpp-macro . -1000)
                (cpp-macro-cont . +)
                (do-while-closure . 0)
                (extern-lang-close . 0)
                (extern-lang-open . 0)
                (friend . 0)
                (incomposition . +)
                (inexpr-class . +)
                (inexpr-statement . +)
                (inextern-lang . +)
                (inher-cont . c-lineup-multi-inher)
                (inher-intro . +)
                (inlambda . c-lineup-inexpr-block)
                (inline-close . 0)
                (inline-open . 0)
                (inmodule . +)
                (knr-argdecl . 0)
                (knr-argdecl-intro . 5)
                (label . 0)
                (lambda-intro-cont . +)
                (member-init-cont . c-lineup-multi-inher)
                (member-init-intro . +)
                (module-close . 0)
                (module-open . 0)
                (objc-method-args-cont . c-lineup-ObjC-method-args)
                (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)
                (objc-method-intro .
                                   [0])
                (statement-block-intro . +)
                (statement-case-intro . +)
                (statement-case-open . +)
                (stream-op . c-lineup-streamop)
                (string . -1000)
                (substatement-label . 0)
                (substatement-open . +)
                (template-args-cont c-lineup-template-args +))))
(setq c-default-style "afiqaize")
